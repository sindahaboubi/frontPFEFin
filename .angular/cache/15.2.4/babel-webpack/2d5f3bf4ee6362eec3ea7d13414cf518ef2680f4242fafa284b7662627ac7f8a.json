{"ast":null,"code":"import { __read, __values } from \"tslib\";\nimport { MatDialog } from '@angular/material/dialog';\nimport { ChartDataSets, Chart } from 'chart.js';\nimport { forkJoin } from 'rxjs';\nimport { StatCourbComponent } from 'src/app/pages/dialogs/stat-courb/stat-courb.component';\nimport { RoleService } from 'src/app/service/role.service';\nimport { TicketTacheService } from 'src/app/service/ticket-tache.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/service/role.service\";\nimport * as i3 from \"src/app/service/ticket-tache.service\";\nvar HistoireMembreChartComponent = /** @class */function () {\n  function HistoireMembreChartComponent(dialog, roleService, ticketTacheService) {\n    this.dialog = dialog;\n    this.roleService = roleService;\n    this.ticketTacheService = ticketTacheService;\n    this.bubbleChartData = [];\n    this.colors = ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)'];\n    this.bubbleChartLegend = true;\n    this.bubbleChartPlugins = [];\n    //tache qui appartient au histoire\n    this.listTicketHistoire = [];\n  }\n  HistoireMembreChartComponent.prototype.generateColors = function (numColors) {\n    var colors = [];\n    for (var i = 0; i < numColors; i++) {\n      var color = \"#\" + ((1 << 24) * Math.random() | 0).toString(16);\n      colors.push(color);\n    }\n    this.colors = colors;\n  };\n  HistoireMembreChartComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    var idProjet = JSON.parse(localStorage.getItem('projet')).id;\n    console.log(idProjet);\n    var ticketsObservable = this.ticketTacheService.getTicketsTacheBySprint(this.sprintId);\n    var roleObservable = this.roleService.afficherListRoleParProjet(idProjet);\n    // Utilisation de forkJoin pour attendre la récupération de toutes les données\n    forkJoin([roleObservable, ticketsObservable]).subscribe(function (_a) {\n      var e_1, _b, e_2, _c, e_3, _d;\n      var _e = __read(_a, 2),\n        roles = _e[0],\n        tickets = _e[1];\n      //recuoerer les membre par role\n      var membres = [];\n      var tableHistoire = [];\n      _this.taches = tickets;\n      var tableHistoireId = Array.from(new Set(tickets.map(function (ticket) {\n        return ticket.ht.id;\n      })));\n      var _loop_1 = function (tabId) {\n        tableHistoire.push(tickets.find(function (ticket) {\n          return ticket.ht.id == tabId;\n        }));\n      };\n      try {\n        for (var tableHistoireId_1 = __values(tableHistoireId), tableHistoireId_1_1 = tableHistoireId_1.next(); !tableHistoireId_1_1.done; tableHistoireId_1_1 = tableHistoireId_1.next()) {\n          var tabId = tableHistoireId_1_1.value;\n          _loop_1(tabId);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (tableHistoireId_1_1 && !tableHistoireId_1_1.done && (_b = tableHistoireId_1.return)) _b.call(tableHistoireId_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      console.log(tableHistoire);\n      _this.listTicketHistoire = tableHistoire;\n      _this.generateColors(roles.length);\n      try {\n        for (var roles_1 = __values(roles), roles_1_1 = roles_1.next(); !roles_1_1.done; roles_1_1 = roles_1.next()) {\n          var role = roles_1_1.value;\n          if (role.status == \"ACCEPTE\") membres.push(role.membre);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (roles_1_1 && !roles_1_1.done && (_c = roles_1.return)) _c.call(roles_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      _this.listMembre = membres;\n      console.log(membres);\n      var bubbleChartData = [];\n      for (var i = 0; i < membres.length; i++) {\n        var memberData = {\n          data: [],\n          label: membres[i].email,\n          backgroundColor: _this.colors[i],\n          borderColor: _this.colors[i]\n        };\n        var _loop_2 = function (ticketTache) {\n          if (memberData.data.find(function (axe) {\n            return axe.y == ticketTache.ht.id;\n          })) {\n            return \"continue\";\n          } else {\n            memberData.data.push({\n              x: i,\n              y: ticketTache.ht.id,\n              r: 5\n            });\n          }\n        };\n        try {\n          for (var tickets_1 = (e_3 = void 0, __values(tickets)), tickets_1_1 = tickets_1.next(); !tickets_1_1.done; tickets_1_1 = tickets_1.next()) {\n            var ticketTache = tickets_1_1.value;\n            _loop_2(ticketTache);\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (tickets_1_1 && !tickets_1_1.done && (_d = tickets_1.return)) _d.call(tickets_1);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n        bubbleChartData.push(memberData);\n      }\n      //conf\n      var chartOptions = {\n        scales: {\n          yAxes: [{\n            min: 0,\n            max: tableHistoire.length,\n            scaleLabel: {\n              labelString: 'Histoire de ticket'\n            },\n            ticks: {\n              autoSkip: true,\n              beginAtZero: false,\n              stepsSize: 1,\n              maxTicksLimit: tableHistoire.length,\n              callback: function (value, index, values) {\n                return tableHistoire[index].ht.titre;\n              }\n            },\n            gridLines: {\n              display: true,\n              drawBorder: true,\n              color: 'rgba(200, 200, 200, 0.2)',\n              drawOnChartArea: true,\n              drawTicks: true\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Membre'\n            },\n            ticks: {\n              stepSize: 1,\n              beginAtZero: false,\n              min: 0,\n              max: membres.length,\n              callback: function (value, index, values) {\n                var _a;\n                return (_a = membres[index]) === null || _a === void 0 ? void 0 : _a.email;\n              }\n            },\n            gridLines: {\n              display: true,\n              drawBorder: true,\n              color: 'rgba(200, 200, 200, 0.2)',\n              drawOnChartArea: true,\n              drawTicks: true\n            }\n          }]\n        },\n        tooltips: {\n          callbacks: {\n            label: function (tooltipItem, data) {\n              var datasetLabel = data.datasets[tooltipItem.datasetIndex].label;\n              var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n              var memberName = membres[value.x].email;\n              var tacheFiltred = _this.taches.filter(function (t) {\n                return t.ht.id == value.y && t.membreId == _this.listMembre[value.x].id;\n              });\n              console.log(_this.taches);\n              return \"\".concat(memberName, \" -> nombre de T\\u00E2che \").concat(tacheFiltred.length);\n            }\n          }\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 10,\n            backgroundColor: '',\n            borderWidth: 0,\n            borderColor: 'transparent',\n            pointStyle: 'mat-icon',\n            icon: 'person',\n            fontColor: 'white',\n            fontSize: 20,\n            fontStyle: 'normal' // style de l'icône\n          }\n        },\n\n        onClick: _this.handleChartClick.bind(_this)\n      };\n      //creation \n      _this.canvas = document.getElementById(\"bubble-chart\");\n      _this.ctx = _this.canvas.getContext(\"2d\");\n      _this.chart = new Chart(_this.ctx, {\n        type: 'bubble',\n        data: {\n          datasets: bubbleChartData\n        },\n        options: chartOptions\n      });\n    });\n  };\n  HistoireMembreChartComponent.prototype.handleChartClick = function (event, array) {\n    var elements = this.chart.getElementAtEvent(event);\n    var member;\n    var ticketHistoire;\n    if (elements.length > 0) {\n      //pour l'axe des x \n      var datasetIndex = elements[0]._datasetIndex;\n      //pour l'axe des y\n      var dataIndexYaxe = elements[0]._index;\n      //affectation des valuer\n      member = this.listMembre[datasetIndex];\n      ticketHistoire = this.listTicketHistoire[dataIndexYaxe].ht;\n    }\n    if (array.length > 0) {\n      var dialogRef = this.dialog.open(StatCourbComponent, {\n        width: '650px',\n        height: '570px',\n        data: {\n          membre: member,\n          histoire: ticketHistoire\n        }\n      });\n    }\n  };\n  HistoireMembreChartComponent.ɵfac = function HistoireMembreChartComponent_Factory(t) {\n    return new (t || HistoireMembreChartComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.RoleService), i0.ɵɵdirectiveInject(i3.TicketTacheService));\n  };\n  HistoireMembreChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HistoireMembreChartComponent,\n    selectors: [[\"app-histoire-membre-chart\"]],\n    inputs: {\n      sprintId: \"sprintId\"\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"chart-area\"], [\"width\", \"200\", \"height\", \"60\", \"id\", \"bubble-chart\"]],\n    template: function HistoireMembreChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return HistoireMembreChartComponent;\n}();\nexport { HistoireMembreChartComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}