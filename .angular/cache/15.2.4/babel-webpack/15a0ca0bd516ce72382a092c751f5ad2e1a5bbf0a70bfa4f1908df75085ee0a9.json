{"ast":null,"code":"import { __values } from \"tslib\";\nimport 'dhtmlx-gantt';\nimport { gantt } from 'dhtmlx-gantt';\nimport { HistoireTicketService } from 'src/app/service/histoire-ticket.service';\nimport { ProductBacklogService } from 'src/app/service/product-backlog.service';\nimport { ProjetServiceService } from 'src/app/service/projet-service.service';\nimport { SprintService } from 'src/app/service/sprint.service';\nimport { TicketTacheService } from 'src/app/service/ticket-tache.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/product-backlog.service\";\nimport * as i3 from \"src/app/service/histoire-ticket.service\";\nimport * as i4 from \"src/app/service/ticket-tache.service\";\nimport * as i5 from \"src/app/service/projet-service.service\";\nvar CourbesComponent = /** @class */function () {\n  function CourbesComponent(sprintService, productBacklogService, ticketService, ticketTacheService, projetService) {\n    this.sprintService = sprintService;\n    this.productBacklogService = productBacklogService;\n    this.ticketService = ticketService;\n    this.ticketTacheService = ticketTacheService;\n    this.projetService = projetService;\n    this.sprints = [];\n    this.dateDebutProjet = new Date(this.projetService.getProjetFromLocalStorage().dateDebut);\n    this.dateFinProjet = this.projetService.getProjetFromLocalStorage().dateFin;\n  }\n  CourbesComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()) // appel du service en utilisant l'id du product backlog\n    .subscribe(function (data) {\n      _this.sprints = data;\n      console.log(_this.sprints);\n      _this.afficherDiagramme();\n    });\n  };\n  CourbesComponent.prototype.afficherDiagramme = function () {\n    var e_1, _a;\n    var _this = this;\n    gantt.config.scale_unit = 'day';\n    gantt.config.date_scale = '%Y-%m-%d';\n    gantt.config.task_date = '%Y-%m-%d';\n    gantt.config.grid_width = 250;\n    gantt.config.columns = [{\n      name: \"text\",\n      label: \"N° sprint\",\n      tree: true,\n      width: '*',\n      resize: true\n    }, {\n      name: \"etat\",\n      label: \"Etat\",\n      align: \"center\",\n      width: '70',\n      resize: true\n    }];\n    gantt.config.start_date = new Date(this.dateDebutProjet);\n    gantt.config.end_date = new Date(this.dateFinProjet);\n    gantt.templates.task_text = function (start, end, task) {\n      if (task.$level === 0) {\n        if (task.state === \"terminé\") {\n          return \"\".concat(task.text, \" <i class=\\\"fa-solid fa-circle-check\\\" style=\\\"color:#626262; font-size:20px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        } else if (task.state === \"en cours\") {\n          return \"\".concat(task.text, \" <i class=\\\"fa-solid fa-spinner fa-beat-fade\\\" style=\\\"color:#626262; font-size:20px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        } else if (task.state === \"en attente\") {\n          return \"\".concat(task.text, \" <i class=\\\"fa-solid fa-circle-pause\\\" style=\\\"color:#626262; font-size:20px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        }\n      } else if (task.$level === 1) {\n        if (task.state === \"TERMINE\") {\n          return \"\".concat(task.title, \" <i class=\\\"fa-solid fa-check\\\" style=\\\"color:green; font-size:15px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        } else if (task.state === \"EN_COURS\") {\n          return \"\".concat(task.title, \" <i class=\\\"fa-solid fa-spinner fa-beat-fade\\\" style=\\\"color:#626262; font-size:15px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        } else if (task.state === \"EN_ATTENTE\") {\n          return \"\".concat(task.title, \" <i class=\\\"fa-solid fa-circle-pause\\\" style=\\\"color:#626262; font-size:15px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        }\n      } else if (task.$level === 2) {\n        if (task.state === \"terminé\") {\n          return \"\".concat(task.title, \" <i class=\\\"fa-solid fa-check\\\" style=\\\"color:green; font-size:15px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        } else if (task.state === \"en cours\") {\n          return \"\".concat(task.title, \" <i class=\\\"fa-solid fa-spinner fa-beat-fade\\\" style=\\\"color:#626262; font-size:15px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        } else if (task.state === \"à faire\") {\n          return \"\".concat(task.title, \" <i class=\\\"fas fa-list-ul\\\" style=\\\"color:#626262; font-size:15px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        } else {\n          return \"\".concat(task.title, \" <i class=\\\"fas fa-search\\\" style=\\\"color:#626262; font-size:15px; float:right; padding:2px; padding-top:4px\\\"></i>\");\n        }\n      }\n    };\n    gantt.init('gantt_here');\n    gantt.parse({\n      data: []\n    });\n    var _loop_1 = function (sprint) {\n      var start_date = new Date(sprint.dateLancement);\n      var end_date = new Date(sprint.dateFin);\n      var duration = gantt.calculateDuration(start_date, end_date);\n      gantt.templates.rightside_text = function (start, end, task) {\n        return task.custom_text || \"\";\n      };\n      var dateLancement = new Date(sprint.dateLancement);\n      var dateFin = new Date(sprint.dateFin);\n      var options = {\n        day: 'numeric',\n        month: 'long'\n      };\n      var dayLancement = dateLancement.getDate();\n      var monthLancement = new Intl.DateTimeFormat('fr-FR', {\n        month: 'long'\n      }).format(dateLancement).charAt(0).toUpperCase() + new Intl.DateTimeFormat('fr-FR', {\n        month: 'long'\n      }).format(dateLancement).slice(1);\n      var dayFin = dateFin.getDate();\n      var monthFin = new Intl.DateTimeFormat('fr-FR', {\n        month: 'long'\n      }).format(dateFin).charAt(0).toUpperCase() + new Intl.DateTimeFormat('fr-FR', {\n        month: 'long'\n      }).format(dateFin).slice(1);\n      var customText = \"\".concat(dayLancement).concat(monthLancement, \" - \").concat(dayFin).concat(monthFin);\n      gantt.addTask({\n        id: sprint.id,\n        text: \"Sprint \".concat(this_1.sprints.indexOf(sprint) + 1),\n        start_date: start_date,\n        end_date: end_date,\n        duration: duration,\n        state: sprint.etat,\n        velocity: \"\".concat(sprint.velocite, \" points\"),\n        color: \"#F1948A\",\n        readonly: true,\n        custom_text: customText,\n        etat: sprint.etat\n      });\n      this_1.ticketService.getHistoireTicketBySprintId(sprint.id).subscribe(function (tickets) {\n        console.log(tickets);\n        tickets.forEach(function (ticket) {\n          var etat;\n          if (ticket.status == 'EN_COURS') {\n            etat = 'en cours';\n          } else if (ticket.status == 'TERMINE') {\n            etat = 'terminé';\n          } else if (ticket.status == 'EN_ATTENTE') {\n            etat = 'en attente';\n          }\n          var ticket_start_date = new Date(ticket.dateDebut);\n          var ticket_end_date = new Date(ticket.dateFin);\n          var ticket_duration = gantt.calculateDuration(ticket_start_date, ticket_end_date);\n          gantt.templates.rightside_text = function (start, end, task) {\n            return task.custom_text || \"\";\n          };\n          var dateDebut = new Date(ticket.dateDebut);\n          var dateFin = new Date(ticket.dateFin);\n          var options = {\n            day: 'numeric',\n            month: 'long'\n          };\n          var dayLancement = dateDebut.getDate();\n          var monthLancement = new Intl.DateTimeFormat('fr-FR', {\n            month: 'long'\n          }).format(dateDebut).charAt(0).toUpperCase() + new Intl.DateTimeFormat('fr-FR', {\n            month: 'long'\n          }).format(dateDebut).slice(1);\n          var dayFin = dateFin.getDate();\n          var monthFin = new Intl.DateTimeFormat('fr-FR', {\n            month: 'long'\n          }).format(dateFin).charAt(0).toUpperCase() + new Intl.DateTimeFormat('fr-FR', {\n            month: 'long'\n          }).format(dateFin).slice(1);\n          var customText = \"\".concat(dayLancement).concat(monthLancement, \" - \").concat(dayFin).concat(monthFin);\n          gantt.addTask({\n            id: ticket.id,\n            text: \"Ticket histoire \".concat(tickets.indexOf(ticket) + 1),\n            start_date: ticket_start_date,\n            end_date: ticket_end_date,\n            duration: ticket_duration,\n            parent: sprint.id,\n            state: ticket.status,\n            effort: ticket.effort,\n            color: '#82E0AA',\n            readonly: true,\n            custom_text: \"<div class=\\\"d-flex align-items-center\\\">\\n            <span>\".concat(customText, \" tttt</span>&nbsp;&nbsp;\\n            <span class=\\\"badge badge-success rounded-circle mr-2\\\" style=\\\"color:green; font-size:10px\\\">\\n            \").concat(ticket.effort, \" pts\\n            </span>\\n          </div>\\n          \"),\n            title: ticket.titre,\n            etat: etat\n          });\n          // Add child tasks for each user story ticket\n          _this.ticketTacheService.getListTicketTacheParHt(ticket.id).subscribe(function (taches) {\n            console.log(taches);\n            taches.forEach(function (tache) {\n              var tache_start_date = new Date(tache.dateLancement);\n              var tache_end_date = new Date(tache.dateFin);\n              var tache_duration = gantt.calculateDuration(tache_start_date, tache_end_date);\n              gantt.templates.rightside_text = function (start, end, task) {\n                return task.custom_text || \"\";\n              };\n              var dateDebut = new Date(tache.dateLancement);\n              var dateFin = new Date(tache.dateFin);\n              var options = {\n                day: 'numeric',\n                month: 'long'\n              };\n              var dayLancement = dateDebut.getDate();\n              var monthLancement = new Intl.DateTimeFormat('fr-FR', {\n                month: 'long'\n              }).format(dateDebut).charAt(0).toUpperCase() + new Intl.DateTimeFormat('fr-FR', {\n                month: 'long'\n              }).format(dateDebut).slice(1);\n              var dayFin = dateFin.getDate();\n              var monthFin = new Intl.DateTimeFormat('fr-FR', {\n                month: 'long'\n              }).format(dateFin).charAt(0).toUpperCase() + new Intl.DateTimeFormat('fr-FR', {\n                month: 'long'\n              }).format(dateFin).slice(1);\n              var customText = \"\".concat(dayLancement).concat(monthLancement, \" - \").concat(dayFin).concat(monthFin);\n              gantt.addTask({\n                id: tache.id,\n                text: \"Ticket t\\u00E2che \".concat(taches.indexOf(tache) + 1),\n                start_date: tache_start_date,\n                end_date: tache_end_date,\n                duration: tache_duration,\n                parent: ticket.id,\n                state: tache.etat,\n                color: '#F1C40F',\n                readonly: true,\n                title: '',\n                etat: tache.etat,\n                custom_text: \"\".concat(tache.membreId ? \"<i class=\\\"fa-solid fa-bookmark\\\"></i> \".concat(tache.titre, \" | \").concat(tache.nbHeurs, \" heure(s) | <i class=\\\"fas fa-user-circle\\\"></i> \").concat(tache.membre.nom, \" \").concat(tache.membre.prenom) : \"<i class=\\\"fa-solid fa-bookmark\\\"></i> \".concat(tache.titre, \" | \").concat(tache.nbHeurs, \" heure(s) | <i class=\\\"fas fa-user-slash\\\"></i> Aucun membre associ\\u00E9\"))\n              });\n            });\n          });\n        });\n      });\n    };\n    var this_1 = this;\n    try {\n      for (var _b = __values(this.sprints), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sprint = _c.value;\n        _loop_1(sprint);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    gantt.render();\n  };\n  CourbesComponent.ɵfac = function CourbesComponent_Factory(t) {\n    return new (t || CourbesComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.ProductBacklogService), i0.ɵɵdirectiveInject(i3.HistoireTicketService), i0.ɵɵdirectiveInject(i4.TicketTacheService), i0.ɵɵdirectiveInject(i5.ProjetServiceService));\n  };\n  CourbesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CourbesComponent,\n    selectors: [[\"app-courbes\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"gantt_here\"]],\n    template: function CourbesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    styles: [\"#gantt_here[_ngcontent-%COMP%] {\\n  margin-top: 5%;\\n  margin-left: 20%;\\n  overflow-x: scroll;\\n  width: 75%;\\n  height: 700px;\\n}\"]\n  });\n  return CourbesComponent;\n}();\nexport { CourbesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}