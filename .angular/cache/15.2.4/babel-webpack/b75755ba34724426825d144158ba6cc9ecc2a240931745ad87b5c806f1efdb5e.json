{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport { AuthentificationService } from '../service/authentification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/authentification.service\";\nvar CsrfInterceptor = /** @class */function () {\n  function CsrfInterceptor(authentificationService) {\n    this.authentificationService = authentificationService;\n    this.httpHeaders = new HttpHeaders();\n  }\n  CsrfInterceptor.prototype.intercept = function (request, next) {\n    var _this = this;\n    var uri = request.url;\n    if (uri.includes('http://localhost:9999/authentification-service/auth/init') || uri.includes('http://localhost:9999/inscription-service')) {\n      return next.handle(request).pipe(tap(function (httpEvent) {\n        if (httpEvent instanceof HttpResponse && httpEvent.headers.has('X-Csrftoken')) {\n          var csrfToken = httpEvent.headers.get('X-Csrftoken');\n          _this.httpHeaders.set('X-Csrftoken', csrfToken);\n        }\n      }));\n    } else {\n      var modifiedRequest = request.clone({\n        headers: this.httpHeaders\n      });\n      return next.handle(modifiedRequest).pipe(tap(function (httpEvent) {\n        if (httpEvent instanceof HttpResponse && httpEvent.headers.has('X-Csrftoken')) {\n          var csrfToken = httpEvent.headers.get('X-Csrftoken');\n          _this.httpHeaders.set('X-Csrftoken', csrfToken);\n        }\n      }));\n    }\n  };\n  CsrfInterceptor.ɵfac = function CsrfInterceptor_Factory(t) {\n    return new (t || CsrfInterceptor)(i0.ɵɵinject(i1.AuthentificationService));\n  };\n  CsrfInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CsrfInterceptor,\n    factory: CsrfInterceptor.ɵfac\n  });\n  return CsrfInterceptor;\n}();\nexport { CsrfInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}