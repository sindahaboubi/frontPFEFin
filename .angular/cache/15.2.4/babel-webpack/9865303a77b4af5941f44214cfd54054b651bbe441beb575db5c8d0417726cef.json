{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { Reponse } from 'src/app/model/reponse';\nimport { ChatBotService } from 'src/app/service/chat-bot.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/service/chat-bot.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/tooltip\";\nfunction InputChatComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" votre question ne concerne pas des sujets scrum. \");\n    i0.ɵɵelementEnd();\n  }\n}\nvar InputChatComponent = /** @class */function () {\n  function InputChatComponent(toastr, fb, chatService) {\n    this.toastr = toastr;\n    this.fb = fb;\n    this.chatService = chatService;\n    this.reponse = new Reponse();\n    this.reponseSent = new EventEmitter();\n  }\n  InputChatComponent.prototype.ngOnInit = function () {\n    if (localStorage.getItem(\"membre\")) {\n      var membre = JSON.parse(localStorage.getItem(\"membre\"));\n      this.questionForm = this.fb.group({\n        text: [\"\", [Validators.required, this.questionValidateur()]],\n        membreId: membre.id\n      });\n    }\n  };\n  InputChatComponent.prototype.questionValidateur = function () {\n    return function (control) {\n      var scrumTeacher = [\"product owner\", \"scrum master\", \"sprint backlog\", \"equipe de developpement\", \"scrum guide\", \"product backlog\", \"productbacklog\", \"sprintbacklog\", \"sprint\", \"timebox\", \"burn-up chart\", \"burn-down chart\", \"daily meet\", \"sprint planning\", \"sprint retrospective\", \"sprint review\", \"cahier de charge\", \"agile\", \"scrum\", \"projet scrum\", \"test scrum\", \"agilité\"];\n      var value = control.value;\n      if (value && !scrumTeacher.some(function (element) {\n        return value.includes(element);\n      })) {\n        return {\n          'question': true\n        };\n      }\n      return null;\n    };\n  };\n  InputChatComponent.prototype.envoyerQuestion = function () {\n    var _this = this;\n    if (this.questionForm.valid) {\n      this.chatService.poserQuestion(this.questionForm.value).subscribe(function (data) {\n        var reponse = data;\n        if (/\\<[^\\>]+\\>/.test(data.text)) {\n          reponse.useHtml = false;\n        } else {\n          reponse.useHtml = true;\n          reponse.text = reponse.text.replace(/\\n/g, '<br>');\n        }\n        _this.reponse = reponse;\n        _this.reponseSent.emit(_this.reponse);\n        _this.reponse = {};\n      }, function (errors) {\n        _this.toastr.error(\"vous avez d\\u00E9j\\u00E0 envoyer une question paraille\");\n      });\n    } else {\n      console.log(\"error\");\n    }\n  };\n  InputChatComponent.ɵfac = function InputChatComponent_Factory(t) {\n    return new (t || InputChatComponent)(i0.ɵɵdirectiveInject(i1.ToastrService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ChatBotService));\n  };\n  InputChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InputChatComponent,\n    selectors: [[\"app-input-chat\"]],\n    outputs: {\n      reponseSent: \"reponseSent\"\n    },\n    decls: 9,\n    vars: 4,\n    consts: [[1, \"card\"], [3, \"formGroup\"], [1, \"d-flex\", \"flex-row\"], [\"type\", \"text\", \"formControlName\", \"text\", \"placeholder\", \"entrer votre question\", 1, \"rounded-pill\", \"col-lg-11\", 2, \"white-space\", \"pre-wrap\", \"word-wrap\", \"break-word\"], [\"matTooltip\", \"poser une Question\", 1, \"btn\", \"rounded\", 3, \"matTooltipDisabled\", \"disabled\", \"click\"], [\"btn\", \"\"], [4, \"ngIf\"]],\n    template: function InputChatComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"textarea\", 3);\n        i0.ɵɵelementStart(4, \"button\", 4, 5);\n        i0.ɵɵlistener(\"click\", function InputChatComponent_Template_button_click_4_listener() {\n          return ctx.envoyerQuestion();\n        });\n        i0.ɵɵelementStart(6, \"mat-icon\");\n        i0.ɵɵtext(7, \"send\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(8, InputChatComponent_mat_error_8_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        var _r0 = i0.ɵɵreference(5);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.questionForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matTooltipDisabled\", _r0.disabled)(\"disabled\", ctx.questionForm.invalid);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.questionForm.get(\"text\").hasError(\"question\") && ctx.questionForm.get(\"text\").touched && ctx.questionForm.get(\"text\").dirty);\n      }\n    },\n    dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i5.MatError, i6.MatIcon, i7.MatTooltip],\n    styles: [\"textarea[_ngcontent-%COMP%] {\\n  width: 90%;\\n  min-height: 60px;\\n  background-color: transparent;\\n  border: none;\\n  font-family: sans-serif;\\n  color: #fff;\\n  font-size: 17px;\\n  padding-left: 2%;\\n  padding-top: 1%;\\n}\\n\\ntextarea[_ngcontent-%COMP%]:focus {\\n  outline: none;\\n}\"]\n  });\n  return InputChatComponent;\n}();\nexport { InputChatComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}