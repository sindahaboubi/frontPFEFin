{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ElementRef } from \"@angular/core\";\nimport { Chart } from 'chart.js';\nimport { HistoireTicketService } from \"src/app/service/histoire-ticket.service\";\nimport { ProductBacklogService } from \"src/app/service/product-backlog.service\";\nimport { ProjetServiceService } from \"src/app/service/projet-service.service\";\nimport { SprintService } from \"src/app/service/sprint.service\";\nimport { TicketTacheService } from \"src/app/service/ticket-tache.service\";\nimport Swal from \"sweetalert2\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/sprint.service\";\nimport * as i2 from \"src/app/service/ticket-tache.service\";\nimport * as i3 from \"src/app/service/product-backlog.service\";\nimport * as i4 from \"src/app/service/histoire-ticket.service\";\nimport * as i5 from \"src/app/service/projet-service.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"src/app/pages/list-membre-projet/list-membre-projet.component\";\nvar _c0 = [\"myChart\"];\nvar _c1 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\nfunction DashboardComponent_div_18_label_13_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 17);\n    i0.ɵɵlistener(\"click\", function DashboardComponent_div_18_label_13_Template_label_click_0_listener() {\n      var restoredCtx = i0.ɵɵrestoreView(_r7);\n      var i_r5 = restoredCtx.index;\n      var ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.onSprintSelected(i_r5));\n    });\n    i0.ɵɵelement(1, \"input\", 18);\n    i0.ɵɵelementStart(2, \"span\", 19);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 20);\n    i0.ɵɵelement(5, \"i\", 21);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    var i_r5 = ctx.index;\n    var ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c1, i_r5 === ctx_r2.sprintSelectedIndex));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", i_r5 === ctx_r2.sprintSelectedIndex);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Sprint \", i_r5 + 1, \" \");\n  }\n}\nfunction DashboardComponent_div_18_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"canvas\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    var sprint_r8 = ctx.$implicit;\n    var i_r9 = ctx.index;\n    var ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"canvas-\", sprint_r8.id, \"\");\n    i0.ɵɵproperty(\"hidden\", ctx_r3.sprintSelectedIndex !== i_r9);\n  }\n}\nfunction DashboardComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\", 4)(4, \"div\", 1)(5, \"div\", 5)(6, \"h5\", 6);\n    i0.ɵɵelement(7, \"i\", 9);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"date\");\n    i0.ɵɵpipe(10, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"div\", 13)(12, \"div\", 14);\n    i0.ɵɵtemplate(13, DashboardComponent_div_18_label_13_Template, 6, 5, \"label\", 15);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵtemplate(14, DashboardComponent_div_18_div_14_Template, 2, 2, \"div\", 16);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(9, 4, ctx_r1.sprints[ctx_r1.sprintSelectedIndex].dateLancement), \" - \", i0.ɵɵpipeBind1(10, 6, ctx_r1.sprints[ctx_r1.sprintSelectedIndex].dateFin), \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.sprints);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.sprints);\n  }\n}\nvar DashboardComponent = /** @class */function () {\n  function DashboardComponent(sprintService, ticketTacheService, productBacklogService, histoireTicketService, projetService) {\n    this.sprintService = sprintService;\n    this.ticketTacheService = ticketTacheService;\n    this.productBacklogService = productBacklogService;\n    this.histoireTicketService = histoireTicketService;\n    this.projetService = projetService;\n    this.clicked = true;\n    this.clicked1 = false;\n    this.clicked2 = false;\n    this.tickets = [];\n    this.sprints = [];\n  }\n  DashboardComponent.prototype.ngOnInit = function () {\n    var _this = this;\n    var storedObject = localStorage.getItem(\"projet\");\n    var parsedObject = JSON.parse(storedObject);\n    this.projet = parsedObject;\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (sprints) {\n      if (sprints.length > 0) {\n        var firstSprint = sprints[0];\n        var diffTime = Math.abs(new Date(firstSprint.dateFin).getTime() - new Date(firstSprint.dateLancement).getTime());\n        var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        localStorage.setItem('sprintDuration', diffDays.toString());\n        _this.sprintSelectedIndex = 0;\n        _this.sprints = sprints;\n        if (_this.sprints.length != 0) {\n          var _loop_1 = function (i) {\n            var sprint = _this.sprints[i];\n            _this.histoireTicketService.getHistoireTicketBySprintId(sprint === null || sprint === void 0 ? void 0 : sprint.id).subscribe(function (tickets) {\n              var labels = [];\n              var data = [];\n              var remainingEffort = sprint.velocite;\n              labels.push(new Date(sprint.dateLancement).setHours(0, 0, 0, 0));\n              data.push(remainingEffort);\n              for (var j = 0; j < tickets.length; j++) {\n                remainingEffort -= tickets[j].effort;\n                labels.push(new Date(tickets[j].dateFin).setHours(0, 0, 0, 0));\n                data.push(remainingEffort);\n              }\n              labels.push(new Date(sprint.dateFin).setHours(0, 0, 0, 0));\n              data.push(0);\n              var chart = new Chart(\"canvas-\".concat(sprint === null || sprint === void 0 ? void 0 : sprint.id), {\n                type: 'line',\n                data: {\n                  labels: labels,\n                  datasets: [{\n                    label: 'Effort restant',\n                    data: data,\n                    borderColor: 'orange',\n                    fill: false\n                  }, {\n                    label: 'Tendance idéale',\n                    data: _this.generateIdealTrend(sprint),\n                    borderColor: '#00d6b4',\n                    fill: false\n                  }]\n                },\n                options: {\n                  title: {\n                    display: true,\n                    text: \"Burn Down Chart\",\n                    fontSize: 20,\n                    fontColor: 'rgb(226, 226, 226)'\n                  },\n                  responsive: true,\n                  scales: {\n                    xAxes: [{\n                      type: 'time',\n                      time: {\n                        unit: 'day',\n                        tooltipFormat: 'll'\n                      },\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Jours de sprint',\n                        fontColor: 'rgb(226, 226, 226)',\n                        fontSize: 14\n                      },\n                      ticks: {\n                        beginAtZero: true,\n                        stepSize: 1\n                      }\n                    }],\n                    yAxes: [{\n                      ticks: {\n                        beginAtZero: true,\n                        stepSize: 1\n                      },\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Effort restant (points)',\n                        fontColor: 'rgb(226, 226, 226)',\n                        fontSize: 14\n                      }\n                    }]\n                  }\n                }\n              });\n            }, function (error) {\n              console.log(error.status);\n              if (error.status == 401) Swal.fire('Attention', 'Vous n\\'avez pas une autorisation', 'error');\n            });\n          };\n          for (var i = 0; i < _this.sprints.length; i++) {\n            _loop_1(i);\n          }\n        }\n      }\n      /** terminer sprint */\n      var sprintEnCours = sprints.find(function (sprint) {\n        return sprint.etat == \"en cours\";\n      });\n      if (sprintEnCours) {\n        sprintEnCours.productBacklogId = sprintEnCours.productBacklog.id;\n        if (_this.verifDate(sprintEnCours.dateFin) && sprintEnCours.etat != \"termine\") {\n          _this.histoireTicketService.getHistoireTicketBySprintId(sprintEnCours.id).subscribe(function (listeHistoireData) {\n            if (!_this.verifListTicketDone(listeHistoireData)) {\n              var sprintSuivant_1 = _this.sprintSuivant(sprints, sprintEnCours);\n              if (sprintSuivant_1) {\n                Swal.fire({\n                  title: \"ce Sprint se termine aujourd'hui voulez voulez vous\\n transferer les tikcets histoire restant dans \\le sprint suivant \",\n                  icon: 'warning',\n                  showCancelButton: true,\n                  confirmButtonColor: '#3085d6',\n                  cancelButtonColor: '#d33',\n                  confirmButtonText: 'Oui',\n                  cancelButtonText: 'Annuler',\n                  background: 'rgba(0,0,0,0.9)',\n                  backdrop: 'rgba(0,0,0,0.4)',\n                  allowOutsideClick: false,\n                  allowEscapeKey: false,\n                  allowEnterKey: false,\n                  focusConfirm: false\n                }).then(function (result) {\n                  if (result.isConfirmed) {\n                    // Le code à exécuter si l'utilisateur a cliqué sur \"Oui, supprimer!\"\n                    _this.transferDeTicket(sprintSuivant_1, listeHistoireData);\n                    sprintEnCours.etat = \"termine\";\n                    _this.sprintService.modifierSprint(sprintEnCours).subscribe(function (data) {\n                      Swal.fire('Bravo !!', 'Sprint termné', 'success');\n                    });\n                  } else {\n                    sprintEnCours.etat = \"termine\";\n                    _this.sprintService.modifierSprint(sprintEnCours).subscribe(function (data) {\n                      Swal.fire('Domage!!', 'Sprint termné mais non pas pour tous ses ticket histoire !', 'warning');\n                    });\n                  }\n                });\n              } else {\n                sprintEnCours.etat = \"termine\";\n                _this.sprintService.modifierSprint(sprintEnCours).subscribe(function (data) {\n                  Swal.fire('Domage!!', 'Sprint termné mais non pas pour tous ses ticket histoire !', 'warning');\n                });\n              }\n            } else {\n              sprintEnCours.etat = \"termine\";\n              _this.sprintService.modifierSprint(sprintEnCours).subscribe(function (data) {\n                Swal.fire('Bravo !!', 'Sprint termné', 'success');\n              });\n            }\n          });\n        }\n      }\n      //}\n    });\n\n    this.histoireTicketService.getListHistoireTicketByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      _this.tickets = data;\n      console.log(_this.tickets);\n      _this.tickets.sort(function (a, b) {\n        if (a.dateFin > b.dateFin) {\n          return 1;\n        } else if (a.dateFin < b.dateFin) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      console.log(_this.tickets);\n    }, function (error) {\n      console.log(error);\n    });\n    this.sprintService.getListSprintsByProductBacklog(this.productBacklogService.getProductBacklogByIdFromLocalStorage()).subscribe(function (data) {\n      if (data.length > 0) {\n        _this.sprintsProjet = data;\n        console.log(_this.sprintsProjet);\n      } else {\n        console.log('Pas de sprints !');\n      }\n      var myChart = new Chart(_this.myChart.nativeElement.getContext('2d'), {\n        type: 'line',\n        data: _this.getChartData(),\n        options: _this.getChartOptions()\n      });\n    }, function (error) {\n      console.log(error);\n    });\n  };\n  DashboardComponent.prototype.onSprintSelected = function (index) {\n    if (this.sprints && this.sprints.length > 0) {\n      this.sprintSelectedIndex = index;\n    }\n  };\n  DashboardComponent.prototype.updateOptions = function () {\n    this.myChartData.data.datasets[0].data = this.data;\n    this.myChartData.update();\n  };\n  DashboardComponent.prototype.generateIdealTrend = function (sprint) {\n    var idealTrend = [];\n    var dateLancement = new Date(sprint.dateLancement);\n    var dateFin = new Date(sprint.dateFin);\n    dateLancement.setHours(0, 0, 0, 0); // Réinitialiser les heures, minutes et secondes à zéro\n    console.log('Date = ' + dateLancement);\n    idealTrend.push({\n      x: dateLancement,\n      y: sprint.velocite\n    });\n    dateFin.setHours(0, 0, 0, 0); // Réinitialiser les heures, minutes et secondes à zéro\n    idealTrend.push({\n      x: dateFin,\n      y: 0\n    });\n    idealTrend.push({\n      x: sprint.dateLancement,\n      y: sprint.velocite\n    });\n    idealTrend.push({\n      x: sprint.dateFin,\n      y: 0\n    });\n    return idealTrend;\n  };\n  //Pour la deuxième courbe\n  DashboardComponent.prototype.getChartData = function () {\n    var ctx = this.myChart.nativeElement.getContext('2d');\n    var gradient = ctx.createLinearGradient(0, 230, 0, 50);\n    gradient.addColorStop(1, 'rgba(233,32,16,0.2)');\n    gradient.addColorStop(0.4, 'rgba(233,32,16,0.0)');\n    gradient.addColorStop(0, 'rgba(233,32,16,0)'); //red colors\n    if (this.sprintsProjet && this.sprintsProjet.length > 0) {\n      var labels = this.sprintsProjet.map(function (sprint, index) {\n        return 'Sprint' + (index + 1);\n      });\n      labels.unshift('0');\n      var data = {\n        labels: labels,\n        datasets: [{\n          pointHoverRadius: 6,\n          pointBorderWidth: 1.5,\n          pointHoverBackgroundColor: 'gray',\n          label: 'Effort terminé',\n          data: this.getScopeCreepData(),\n          fill: false,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          backgroundColor: gradient,\n          pointBackgroundColor: '#FC836B',\n          pointBorderColor: '#FC836B',\n          borderColor: '#FC836B'\n        }, {\n          label: 'Effort planifié',\n          data: this.getEffortPlanifieData(),\n          fill: false,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderColor: '#64FF25',\n          pointBorderWidth: 1.5,\n          pointBackgroundColor: '#64FF25',\n          pointBorderColor: '#64FF25'\n        }]\n      };\n      return data;\n    }\n  };\n  DashboardComponent.prototype.getScopeCreepData = function () {\n    var e_1, _a;\n    var scopeCreepData = [];\n    scopeCreepData.push(0);\n    var scopeCreepTotal = 0;\n    var _loop_2 = function (sprint) {\n      var userStoriesInSprint = this_1.tickets.filter(function (us) {\n        return us.sprintId === (sprint === null || sprint === void 0 ? void 0 : sprint.id);\n      });\n      var scopeCreepInSprint = userStoriesInSprint.reduce(function (acc, us) {\n        return acc + us.effort * (us.status === 'TERMINE' ? 1 : 0);\n      }, 0);\n      scopeCreepTotal = scopeCreepTotal + scopeCreepInSprint;\n      scopeCreepData.push(scopeCreepTotal);\n    };\n    var this_1 = this;\n    try {\n      for (var _b = __values(this.sprintsProjet), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var sprint = _c.value;\n        _loop_2(sprint);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return scopeCreepData;\n  };\n  DashboardComponent.prototype.getEffortPlanifieData = function () {\n    var e_2, _a;\n    if (this.sprintsProjet && this.sprintsProjet.length > 0) {\n      var effortPlanifieData = [];\n      effortPlanifieData.push(0);\n      var effortPlanifieTotal = 0;\n      try {\n        for (var _b = __values(this.sprintsProjet), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var sprint = _c.value;\n          effortPlanifieTotal += sprint.velocite;\n          effortPlanifieData.push(effortPlanifieTotal);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      return effortPlanifieData;\n    }\n  };\n  DashboardComponent.prototype.getChartOptions = function () {\n    return {\n      responsive: true,\n      tooltips: {\n        backgroundColor: '#f5f5f5',\n        titleFontColor: '#333',\n        bodyFontColor: '#666',\n        bodySpacing: 4,\n        xPadding: 14,\n        mode: \"nearest\",\n        intersect: 0,\n        position: \"nearest\"\n      },\n      title: {\n        display: true,\n        text: 'Burn-up chart',\n        fontSize: 20,\n        fontColor: 'rgb(226, 226, 226)'\n      },\n      scales: {\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Sprints',\n            fontColor: 'rgb(226, 226, 226)',\n            fontSize: 14\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Efforts (en points )',\n            fontColor: 'rgb(226, 226, 226)',\n            fontSize: 14\n          },\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    };\n  };\n  DashboardComponent.prototype.verifDate = function (dateRec) {\n    var aujourdhui = new Date();\n    dateRec = new Date(dateRec);\n    return dateRec.getFullYear() === aujourdhui.getFullYear() && dateRec.getMonth() === aujourdhui.getMonth() && dateRec.getDate() === aujourdhui.getDate();\n  };\n  DashboardComponent.prototype.verifListTicketDone = function (liste) {\n    var doneList = liste.filter(function (histoire) {\n      return histoire.status == \"TERMINE\";\n    });\n    return doneList.length == liste.length;\n  };\n  DashboardComponent.prototype.sprintSuivant = function (liste, sprintActuelle) {\n    if (liste.indexOf(sprintActuelle) == liste.length - 1) return null;else return liste[liste.indexOf(sprintActuelle) + 1];\n  };\n  DashboardComponent.prototype.transferDeTicket = function (sprint, listeHistoire) {\n    var e_3, _a;\n    var _this = this;\n    var listeHistoireEnAttente = listeHistoire.filter(function (histoire) {\n      return histoire.status == \"EN_COURS\";\n    });\n    try {\n      for (var listeHistoireEnAttente_1 = __values(listeHistoireEnAttente), listeHistoireEnAttente_1_1 = listeHistoireEnAttente_1.next(); !listeHistoireEnAttente_1_1.done; listeHistoireEnAttente_1_1 = listeHistoireEnAttente_1.next()) {\n        var histoire = listeHistoireEnAttente_1_1.value;\n        this.histoireTicketService.assignUserStoryToSprint(histoire.id, sprint.id).subscribe(function (data) {\n          Swal.fire('Transfers aquis', 'les ticket en bien ete transmis', 'success');\n        });\n        /** reglage de tâche */\n        this.ticketTacheService.getListTicketTacheParHt(histoire.id).subscribe(function (listeTacheData) {\n          var e_4, _a;\n          try {\n            for (var listeTacheData_1 = (e_4 = void 0, __values(listeTacheData)), listeTacheData_1_1 = listeTacheData_1.next(); !listeTacheData_1_1.done; listeTacheData_1_1 = listeTacheData_1.next()) {\n              var tache = listeTacheData_1_1.value;\n              tache.sprintBacklogId = null;\n              _this.ticketTacheService.modifierTicketTache(tache).subscribe(function (data) {\n                return console.log(data);\n              });\n            }\n          } catch (e_4_1) {\n            e_4 = {\n              error: e_4_1\n            };\n          } finally {\n            try {\n              if (listeTacheData_1_1 && !listeTacheData_1_1.done && (_a = listeTacheData_1.return)) _a.call(listeTacheData_1);\n            } finally {\n              if (e_4) throw e_4.error;\n            }\n          }\n        });\n        /** end */\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (listeHistoireEnAttente_1_1 && !listeHistoireEnAttente_1_1.done && (_a = listeHistoireEnAttente_1.return)) _a.call(listeHistoireEnAttente_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.SprintService), i0.ɵɵdirectiveInject(i2.TicketTacheService), i0.ɵɵdirectiveInject(i3.ProductBacklogService), i0.ɵɵdirectiveInject(i4.HistoireTicketService), i0.ɵɵdirectiveInject(i5.ProjetServiceService));\n  };\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    viewQuery: function DashboardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myChart = _t.first);\n      }\n    },\n    decls: 20,\n    vars: 8,\n    consts: [[1, \"content\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\", \"card-chart\"], [1, \"card-header\"], [1, \"col-sm-6\", \"text-left\"], [1, \"card-category\", 2, \"color\", \"rgb(226, 226, 226)\"], [1, \"fa-solid\", \"fa-bars-progress\"], [1, \"card-category\", 2, \"color\", \"rgb(226, 226, 226)\", \"float\", \"right\"], [1, \"fas\", \"fa-calendar-alt\"], [1, \"card-body\"], [\"myChart\", \"\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"col-sm-6\"], [\"data-toggle\", \"buttons\", 1, \"btn-group\", \"btn-group-toggle\", \"float-right\"], [\"class\", \"btn btn-sm btn-secondary btn-simple\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-sm\", \"btn-secondary\", \"btn-simple\", 3, \"ngClass\", \"click\"], [\"type\", \"radio\", \"name\", \"options\", 3, \"checked\"], [1, \"d-none\", \"d-sm-block\", \"d-md-block\", \"d-lg-block\", \"d-xl-block\"], [1, \"d-block\", \"d-sm-none\"], [1, \"tim-icons\", \"icon-single-02\"], [3, \"id\", \"hidden\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 1)(6, \"div\", 5)(7, \"h3\", 6);\n        i0.ɵɵelement(8, \"i\", 7);\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 5)(11, \"h3\", 8);\n        i0.ɵɵelement(12, \"i\", 9);\n        i0.ɵɵtext(13);\n        i0.ɵɵpipe(14, \"date\");\n        i0.ɵɵpipe(15, \"date\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(16, \"canvas\", 10, 11);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(18, DashboardComponent_div_18_Template, 15, 8, \"div\", 12);\n        i0.ɵɵelement(19, \"app-list-membre-projet\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate1(\" Projet (\", ctx.projet.nom, \")\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(14, 4, ctx.projet.dateDebut), \" - \", i0.ɵɵpipeBind1(15, 6, ctx.projet.dateFin), \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", (ctx.sprints == null ? null : ctx.sprints.length) != 0);\n      }\n    },\n    dependencies: [i6.NgClass, i6.NgForOf, i6.NgIf, i7.ListMembreProjetComponent, i6.DatePipe],\n    styles: [\".card-body[_ngcontent-%COMP%] {\\n  height: 300px;\\n  width: 50px;\\n}\"]\n  });\n  return DashboardComponent;\n}();\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}